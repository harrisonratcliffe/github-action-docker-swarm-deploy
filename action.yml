name: 'github-action-docker-swarm-deploy'
description: 'Deploy your Docker Swarm apps in seconds. ðŸš€'
inputs:
  docker_compose_file_path:
    description: 'Set your docker compose file path with the CLI options.'
    default: '-c docker-compose.yml -c docker-compose.prod.yml'
    required: false
  md5_file_path:
    description: 'Set the path to the file you would like to get the MD5 checksum for.'
    default: ''
    required: false
  md5_variable_name:
    description: 'Set the name of the variable to store the MD5 checksum in.'
    default: 'MD5_CHECKSUM'
    required: false
  stack_name:
    description: 'The name of your Docker stack.'
    required: true
  ssh_deploy_private_key:
    description: 'The private key you have authenticated to connect to your server via SSH.'
    required: true
  ssh_remote_known_hosts:
    description: 'The public key of your SSH server to validate we are connecting to the right server.'
    default: ''
    required: false
  ssh_deploy_user:
    description: 'The user that you would like to connect as on the remote server via SSH.'
    default: 'deploy'
    required: true
  ssh_remote_hostnames:
    description: 'Comma-separated list of hostnames or IP addresses to try in order.'
    required: true
  ssh_remote_port:
    description: 'The SSH port of the remote server you would like to connect to.'
    default: '22'
    required: false
  registry:
    description: 'Comma-separated list of container registries to authenticate with (e.g., "docker.io,ghcr.io").'
    default: 'docker.io' # Default to Docker Hub if not specified
    required: false
  registry-username:
    description: 'The username to use to authenticate with the container registry.'
    required: true
  registry-token:
    description: 'The token or password to use to authenticate with the container registry.'
    required: true
  log_level:
    description: 'The log level to use for the Docker CLI.'
    default: 'debug'
  env_file_base64:
    description: 'The base64 encoded .env file to load into the container.'
    required: false

runs:
  using: 'composite'
  steps:

    - name: Checkout
      uses: actions/checkout@v4

    - name: Set MD5 checksum (if provided)
      if: ${{ inputs.md5_file_path }}
      run: |
        MD5_VALUE=$(md5sum ${{ inputs.md5_file_path }} | awk '{ print $1 }')
        echo "::add-mask::$MD5_VALUE"
        echo "${{ inputs.md5_variable_name }}=$MD5_VALUE" >> $GITHUB_ENV
      shell: bash

    - name: Prepare SSH configuration.
      run: |
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
      shell: bash

    - name: Add SSH key.
      run: |
        ssh-agent -a $SSH_AUTH_SOCK > /dev/null
        if ! echo "${{ inputs.ssh_deploy_private_key }}" | tr -d '\r' | ssh-add - 2>/dev/null; then
          echo "::error::The provided SSH private key is not in a valid format. Please check your ssh_deploy_private_key input. For more information, see the [github-action-docker-swarm-deploy REA]"
          exit 1
        fi
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      shell: bash

    - name: Verify SSH Connection
      run: |
        echo "::group::Validating SSH Connection"
        
        # Split the hostnames into an array
        IFS=',' read -ra HOSTNAME_ARRAY <<< "${{ inputs.ssh_remote_hostnames }}"
        
        connection_successful=false
        
        for hostname in "${HOSTNAME_ARRAY[@]}"; do
          # Trim whitespace
          hostname=$(echo "$hostname" | xargs)
          
          echo "Attempting to connect to $hostname on port ${{ inputs.ssh_remote_port }} as user ${{ inputs.ssh_deploy_user }}"
          
          attempt_ssh_connection() {
            local ssh_options="$1"
            timeout 10s ssh $ssh_options -p ${{ inputs.ssh_remote_port }} ${{ inputs.ssh_deploy_user }}@"$hostname" exit 2>/dev/null
          }
          
          temp_known_hosts_file=~/.ssh/temp_known_hosts
          
          # If known_hosts is provided, try to use it
          if [[ -n "${{ inputs.ssh_remote_known_hosts }}" ]]; then
            echo "${{ inputs.ssh_remote_known_hosts }}" > "$temp_known_hosts_file"
            if attempt_ssh_connection "-o BatchMode=yes -o ConnectTimeout=5 -o UserKnownHostsFile=$temp_known_hosts_file"; then
              echo "SSH connection successful with provided known_hosts to $hostname"
              connection_successful=true
              break
            else
              echo "Connection to $hostname failed with provided known_hosts"
            fi
            # Clean up the temporary file
            rm -f "$temp_known_hosts_file"
          else
            if attempt_ssh_connection "-o BatchMode=yes -o ConnectTimeout=5 -o StrictHostKeyChecking=no"; then
              echo "SSH connection successful to $hostname"
              connection_successful=true
              break
            fi
          fi
        done
        
        if $connection_successful; then
          # Set the successful hostname as an environment variable for later steps
          echo "SUCCESSFUL_SSH_HOSTNAME=$hostname" >> $GITHUB_ENV
          echo "::endgroup::"
          exit 0
        fi
        
        echo "::error::SSH CONNECTION FAILED to all provided hostnames%0A%0A\
        Tried connecting to: ${{ inputs.ssh_remote_hostnames }}%0A\
        Please verify your hostnames/IPs and connection details."
        
        echo "::endgroup::"
        exit 1
      shell: bash
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock

    - name: If provided, use the known_hosts file.
      if: ${{ inputs.ssh_remote_known_hosts }}
      run: |
        echo "${{ inputs.ssh_remote_known_hosts }}" >> ~/.ssh/known_hosts
        chmod 644 ~/.ssh/known_hosts
        if [[ "$ACTIONS_STEP_DEBUG" == "true" ]]; then
          echo "::debug::Contents of ~/.ssh/known_hosts:"
          cat ~/.ssh/known_hosts | sed 's/^/::debug::  /'
        fi
      shell: bash

    - name: If no known_hosts file is provided, use ssh-keyscan to get the public key of the remote server.
      if: ${{ inputs.ssh_remote_known_hosts == '' }}
      run: |
        echo "::warning::Consider setting \"SSH_REMOTE_KNOWN_HOSTS\" as a GitHub Actions secret for improved security.%0A%0A\
        For more information see the serversideup/github-action-docker-swarm-deploy README."
        
        # Use the successfully connected hostname from the previous step
        ssh-keyscan -p ${{ inputs.ssh_remote_port }} -H ${{ env.SUCCESSFUL_SSH_HOSTNAME }} >> ~/.ssh/known_hosts
        chmod 644 ~/.ssh/known_hosts
        if [ ! -s ~/.ssh/known_hosts ]; then
          echo "::error::The known_hosts file is empty. This may indicate an issue with the SSH keyscan process."
        else
          if [[ "$ACTIONS_STEP_DEBUG" == "true" ]]; then
            echo "::notice::Debug: Contents of ~/.ssh/known_hosts:"
       shell: bash
            
branding:
  icon: 'zap'
  color: 'blue'
